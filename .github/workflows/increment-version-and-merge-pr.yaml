name: Auto increment version and merge PR

on:
  issue_comment:
    types: [created]

jobs:
  bump-and-merge:
    if: github.event.comment.body == '/merge'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history so we can find the merge-base
          fetch-depth: 0
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: maven
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Fetch PR
        run: gh pr checkout ${{ github.event.issue.number }}
      - name: Squash and Combine Commits
        run: |
          # Get the name of the target branch (e.g., 'main' or 'develop')
          TARGET_BRANCH=$(gh pr view ${{ github.event.issue.number }} --json baseRefName -q .baseRefName)
          echo "Target branch is $TARGET_BRANCH"

          # Find the commit where this branch split from the target branch
          MERGE_BASE=$(git merge-base origin/$TARGET_BRANCH HEAD)
          echo "Merge base is $MERGE_BASE"

          # Get all commit messages from the PR, separated by two newlines
          COMMIT_MESSAGES=$(git log $MERGE_BASE..HEAD --pretty=format:"%s%n%n%b")

          # Reset the branch to the merge base, but keep all changes staged
          git reset --soft $MERGE_BASE

          # Commit the staged changes as a single new commit with the combined message
          git commit -m "$COMMIT_MESSAGES"

      - name: Detect version bump
        id: bump
        run: |
          # This logic now correctly reads the single, squashed commit message
          LAST_MSG=$(git log -1 --pretty=%B)
          echo "Last commit: $LAST_MSG"
          BUMP="patch"
          if echo "$LAST_MSG" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$LAST_MSG" | grep -q "^feat"; then
            BUMP="minor"
          elif echo "$LAST_MSG" | grep -q "^fix"; then
            BUMP="patch"
          fi
          echo "Bump type: $BUMP"
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"
          case "$BUMP" in
            major) NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$1+=1;$2=0;$3=0;print}') ;;
            minor) NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$2+=1;$3=0;print}') ;;
            patch) NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$3+=1;print}') ;;
          esac
          echo "Version bump ($CURRENT_VERSION) -> ($NEW_VERSION)"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      - name: Bump version in pom.xml
        run: |
          mvn --batch-mode versions:set -DnewVersion=$NEW_VERSION
          mvn --batch-mode versions:commit
      - name: Commit Version Bump
        run: |
          git add pom.xml
          git commit -m "chore: Bump version to ${{ env.NEW_VERSION }}"
      - name: Push Version Bump
        run: git push --force-with-lease origin HEAD
      - name: Rebase onto target
        run: |
          TARGET_BRANCH=$(gh pr view ${{ github.event.issue.number }} --json baseRefName -q .baseRefName)
          git fetch origin $TARGET_BRANCH
          git rebase origin/$TARGET_BRANCH
      - name: Merge PR
        run: gh pr merge ${{ github.event.issue.number }} --squash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}