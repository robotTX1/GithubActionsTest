name: Release

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          token: '${{ secrets.GITHUB_TOKEN }}'
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: maven
      - name: Detect version bump
        id: bump
        run: |
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No tags found, defaulting to 1.0.0"
            CURRENT_VERSION="1.0.0"
            COMMITS=$(git log --pretty=format:"%s%n%b")
          else
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s%n%b")
          fi

          echo "Commits since last tag:"
          echo "$COMMITS"

          # Default bump = patch
          BUMP="patch"

          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -q "^feat"; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -q "^fix"; then
            BUMP="patch"
          fi

          echo "Bump type: $BUMP"

          # Calculate new version
          case "$BUMP" in
            major) NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$1+=1;$2=0;$3=0;print}') ;;
            minor) NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$2+=1;$3=0;print}') ;;
            patch) NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$3+=1;print}') ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      - name: Bump version in pom.xml
        run: |
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit
      - name: Commit and tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "chore(release): $NEW_VERSION [skip ci]" || echo "No changes to commit"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push
          git push origin "v$NEW_VERSION"